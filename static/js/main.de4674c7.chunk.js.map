{"version":3,"sources":["Assets/Images/empty.svg","serviceWorker.js","Header/index.js","Components/ControlButton/index.js","Books/Book/Constants.js","Books/Book/index.js","Books/Redux/Action.js","Books/Redux/ActionTypes.js","Pages/TableView/Redux/Action.js","Pages/TableView/Redux/ActionTypes.js","Components/DeleteButton/index.js","Pages/EditorView/index.js","Pages/EditorView/Redux/Action.js","Pages/EditorView/Redux/ActionTypes.js","App/Redux/Actions.js","App/Redux/ActionTypes.js","Pages/TableView/index.js","Components/CustomModal/index.js","App/index.js","App/Redux/AppReducer.js","Books/Redux/BooksReducer.js","Pages/TableView/Redux/TableViewReducer.js","Pages/EditorView/Redux/EditorViewReducer.js","ReduxStore/CombineReducers.js","ReduxStore/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","props","title","className","ControlButton","console","log","style","rest","appReducer","useSelector","store","app","isEditingView","icon","RollbackOutlined","PlusOutlined","onClick","ISBN13_PREFIXS","ISBN_ID_LENGTHS_WO_CHECKDIGIT","ISBN10_MATRIX","ISBN13_MATRIX","Book","isbn","genre","summary","toObject","reduce","acc","cur","idx","length","key","this","Array","isArray","identifier","checkDigit","_identifer","includes","isbn13Prefix","substring","mod","str","split","map","d","Number","join","matrix","modBase","isValidIsbn","_isbn","generateRandomIsbn","getRandomInt","min","max","Math","ceil","floor","random","i","ISBN13_LENGTH","getIsbnCheckDigit","spliceSlice","index","count","add","slice","firstDashIdx","secondDashIdx","undefined","bookAdd","bookDetails","dispatch","type","payload","bookDelete","updateSelectedTableKeys","selectedKeys","DeleteButton","useDispatch","tableReducer","table","disabled","DeleteOutlined","onDeleteSelected","TextArea","Input","lorem","LoremIpsum","sentencesPerParagraph","wordsPerSentence","EditorView","Form","useForm","form","booksReducer","books","editorReducer","editor","layoutWithoutLabel","wrapperCol","span","layoutButtons","useEffect","recordToUpdate","setFieldsValue","Title","ISBN","GenreList","g","trim","Summary","layout","name","validateMessages","required","initialValues","onFinish","values","Item","label","hasFeedback","validateTrigger","rules","validator","_","value","test","Promise","resolve","reject","placeholder","some","b","List","fields","remove","field","whitespace","message","noStyle","MinusCircleOutlined","width","htmlType","generateSentences","generateWords","generateParagraphs","TableView","bookReducer","columns","dataIndex","responsive","render","text","arrowPointAtCenter","EditOutlined","e","stopPropagation","onEdit","onSelectedRowsChange","selectedRows","keys","filter","r","renderEmpty","image","EmptySVG","imageStyle","height","description","onEmpty","dataSource","pagination","position","pageSize","showQuickJumper","hideOnSinglePage","rowSelection","onSelect","record","selected","onSelectMultiple","onSelectAll","onRow","selectedRow","CustomModal","isVisible","onClose","paperClassName","paperStyle","children","useState","IsVisible","setIsVisible","defaultOnClose","id","direction","size","level","CloseOutlined","Typography","Text","App","BooksInitialData","forEach","memoToggleEditingView","useCallback","setUpdatingRecordDetails","flex","AppReducerIniitalState","BookReducerInitialState","TableViewInitialState","EditorViewInitialState","combineReducers","default","state","action","createStore","combinedReducers","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.de4674c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty.7ac16750.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Header.less';\r\nimport { PageHeader } from 'antd';\r\n\r\nexport let Header = (props) => {\r\n    return (\r\n        <div {...props}>\r\n            <PageHeader\r\n                title={\r\n                    <div className='HeaderTitle'>\r\n                        <div className='HeaderTitleLeft paddingHorizontal'>\r\n                            IsaacKhoo\r\n                    </div>\r\n                        <div className='HeaderTitleRight paddingHorizontal'>\r\n                            BookRepo\r\n                    </div>\r\n                    </div>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { PlusOutlined, RollbackOutlined } from '@ant-design/icons';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport let ControlButton = (props) => {\r\n\r\n    console.log(`Rendering Control Button`);\r\n\r\n    const { className, style, ...rest } = props;\r\n\r\n    const appReducer = useSelector(store => store.app);\r\n    const { isEditingView } = appReducer;\r\n\r\n    return (\r\n        <Button\r\n            icon={isEditingView ? <RollbackOutlined /> : <PlusOutlined />}\r\n            onClick={() => { console.log(`No onClick callback provided`); }}\r\n            {...rest}\r\n        >\r\n            {appReducer.isEditingView ? `Return` : `Add Book`}\r\n        </Button>\r\n    );\r\n};","export const ISBN_CHECKDIGIT_LENGTH = 1;\r\nexport const ISBN13_PREFIX_LENGTH = 3;\r\nexport const ISBN13_PREFIXS = ['978', '979'];\r\nexport const ISBN10_ID_LENGTH = 9;\r\nexport const ISBN10_LENGTH = 10;\r\nexport const ISBN13_ID_LENGTH = 12;\r\nexport const ISBN13_LENGTH = 13;\r\nexport const ISBN_ID_LENGTHS_WO_CHECKDIGIT = [ISBN10_ID_LENGTH, ISBN13_ID_LENGTH];\r\nexport const ISBN10_MATRIX = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\r\nexport const ISBN10_MOD = 11;\r\nexport const ISBN13_MATRIX = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1];\r\nexport const ISBN13_MOD = 10;","import {\r\n    ISBN_ID_LENGTHS_WO_CHECKDIGIT,\r\n    ISBN13_PREFIX_LENGTH,\r\n    ISBN13_PREFIXS,\r\n    ISBN13_ID_LENGTH,\r\n    ISBN10_ID_LENGTH,\r\n    ISBN10_MATRIX,\r\n    ISBN10_MOD,\r\n    ISBN13_MATRIX,\r\n    ISBN13_MOD,\r\n    ISBN10_LENGTH,\r\n    ISBN13_LENGTH,\r\n    ISBN_CHECKDIGIT_LENGTH\r\n} from \"./Constants\";\r\n\r\nexport class Book {\r\n    #title = '';\r\n    #isbn = '';\r\n    #genre = [];\r\n    #summary = '';\r\n\r\n    constructor({ title, isbn, genre, summary }) {\r\n        this.#title = title;\r\n        this.#isbn = isbn;\r\n        this.#genre = Array.isArray(genre) ? [...genre] : [genre];\r\n        this.#summary = summary || 'No Summary Provided';\r\n    };\r\n\r\n    // getters\r\n    get title() {\r\n        return this.#title;\r\n    };\r\n    get isbn() {\r\n        return this.#isbn;\r\n    };\r\n    get genre() {\r\n        return this.#genre;\r\n    };\r\n    get summary() {\r\n        return this.#summary;\r\n    };\r\n\r\n    // static private methods\r\n    static #splitStringToNumberArr = (str) => {\r\n        return str.split('').map(d => Number(d));\r\n    };\r\n\r\n    static #initializeIsbn = (isbn) => {\r\n        return isbn.split('-').join('');\r\n    };\r\n\r\n    static #getMatrix = (isbn) => {\r\n        return isbn.length === ISBN10_ID_LENGTH || isbn.length === ISBN10_LENGTH ? ISBN10_MATRIX : ISBN13_MATRIX;\r\n    }\r\n\r\n    static #getModuloBase = (isbn) => {\r\n        return isbn.length === ISBN10_ID_LENGTH || isbn.length === ISBN10_LENGTH ? ISBN10_MOD : ISBN13_MOD;\r\n    }\r\n\r\n    static #getISBNModulo = (isbn) => {\r\n        let matrix = this.#getMatrix(isbn);\r\n        let modBase = this.#getModuloBase(isbn);\r\n\r\n        return this.#splitStringToNumberArr(isbn).reduce((acc, cur, idx) => {\r\n            return acc + (cur * matrix[idx]);\r\n        }, 0) % modBase;\r\n    }\r\n\r\n    // static methods\r\n    static getIsbnCheckDigit(identifier) {\r\n        let checkDigit = -1;\r\n\r\n        // removes any dashes if provided\r\n        const _identifer = this.#initializeIsbn(identifier);\r\n\r\n        // validate identifier length\r\n        if (!ISBN_ID_LENGTHS_WO_CHECKDIGIT.includes(_identifer.length))\r\n            return checkDigit;\r\n\r\n        // check that the iniital 3 digits are valid for isbn 13 ids\r\n        if (_identifer.length === ISBN13_ID_LENGTH) {\r\n            let isbn13Prefix = _identifer.substring(0, ISBN13_PREFIX_LENGTH);\r\n            if (!ISBN13_PREFIXS.includes(isbn13Prefix))\r\n                return checkDigit;\r\n        }\r\n\r\n        // generate the check digit\r\n        let mod = this.#getISBNModulo(_identifer);\r\n        checkDigit = mod === 0 ? mod : this.#getModuloBase(_identifer) - mod;\r\n\r\n        return checkDigit;\r\n    };\r\n\r\n    static isValidIsbn = (isbn) => {\r\n        const _isbn = this.#initializeIsbn(isbn);\r\n        let mod = this.#getISBNModulo(_isbn);\r\n        return mod % this.#getModuloBase(_isbn) === 0 ? true : false;\r\n    };\r\n\r\n    static generateRandomIsbn = () => {\r\n        let isbn = '';\r\n\r\n        function getRandomInt(min, max) {\r\n            min = Math.ceil(min);\r\n            max = Math.floor(max);\r\n            return Math.floor(Math.random() * (max - min + 1)) + min;\r\n        }\r\n\r\n        // generate prefix\r\n        isbn += ISBN13_PREFIXS[getRandomInt(0, 1)];\r\n        // generate the other numbers, except check digit\r\n        for (let i = 0; i < (ISBN13_LENGTH - ISBN13_PREFIX_LENGTH - ISBN_CHECKDIGIT_LENGTH); ++i)\r\n            isbn += getRandomInt(0, 9);\r\n\r\n        // generate check digit\r\n        isbn += this.getIsbnCheckDigit(isbn);\r\n\r\n        // validate isbn\r\n        if (this.isValidIsbn(isbn)) {\r\n            function spliceSlice(str, index, count, add) {\r\n                // We cannot pass negative indexes directly to the 2nd slicing operation.\r\n                if (index < 0) {\r\n                    index = str.length + index;\r\n                    if (index < 0) {\r\n                        index = 0;\r\n                    }\r\n                }\r\n                return str.slice(0, index) + (add || \"\") + str.slice(index + count);\r\n            }\r\n\r\n            // add dash after prefix\r\n            isbn = spliceSlice(isbn, ISBN13_PREFIX_LENGTH, 0, \"-\");\r\n            // add dash before checkdigit\r\n            isbn = spliceSlice(isbn, isbn.length - 1, 0, \"-\");\r\n            // randomly insert 2 more dashes\r\n            let firstDashIdx = getRandomInt(2, 5 + 2);\r\n            let secondDashIdx = getRandomInt(2, Math.min(ISBN13_LENGTH - ISBN13_PREFIX_LENGTH - ISBN_CHECKDIGIT_LENGTH - firstDashIdx - 1 + 1, 7));\r\n            isbn = spliceSlice(isbn, ISBN13_PREFIX_LENGTH + firstDashIdx, 0, \"-\");\r\n            isbn = spliceSlice(isbn, isbn.length - 2 - secondDashIdx, 0, \"-\");\r\n        }\r\n        else\r\n            isbn = undefined;\r\n\r\n        return isbn;\r\n    }\r\n\r\n    // methods\r\n    toObject = () => {\r\n        return {\r\n            title: this.title,\r\n            isbn: this.isbn,\r\n            genre: this.genre.reduce((acc, cur, idx) => {\r\n                acc += cur;\r\n                if (idx !== this.genre.length - 1)\r\n                    acc += ', ';\r\n                return acc;\r\n            }, ''),\r\n            summary: this.summary,\r\n            key: this.isbn\r\n        };\r\n    };\r\n}; // end class Book","import {\r\n    BOOK_ADD,\r\n    BOOK_UPDATE,\r\n    BOOK_DELETE\r\n} from './ActionTypes';\r\nimport { Book } from '../Book';\r\n\r\nexport let bookAdd = (bookDetails) => dispatch => {\r\n    let book = new Book({ ...bookDetails });\r\n    dispatch({\r\n        type: BOOK_ADD,\r\n        payload: book\r\n    });\r\n};\r\n\r\nexport let bookUpdate = (bookDetails) => dispatch => {\r\n    let book = new Book({ ...bookDetails });\r\n    dispatch({\r\n        type: BOOK_UPDATE,\r\n        payload: book\r\n    });\r\n};\r\n\r\nexport let bookDelete = (isbn) => dispatch => {\r\n    dispatch({\r\n        type: BOOK_DELETE,\r\n        payload: isbn\r\n    });\r\n};","export const BOOK_ADD = 'BOOK_ADD';\r\nexport const BOOK_UPDATE = 'BOOK_UPDATE';\r\nexport const BOOK_DELETE = 'BOOK_DELETE';","import { Book } from \"../../../Books/Book\";\r\nimport { SET_SELECTED_ROW, TABLE_UPDATE_SELECTED_KEYS } from \"./ActionTypes\"\r\n\r\nexport let updateSelectedTableKeys = (selectedKeys) => dispatch => {\r\n    if (!Array.isArray(selectedKeys))\r\n        return;\r\n\r\n    dispatch({\r\n        type: TABLE_UPDATE_SELECTED_KEYS,\r\n        payload: selectedKeys\r\n    });\r\n};\r\n\r\nexport let setSelectedRow = (selectedRow) => dispatch => {\r\n    let book = new Book(selectedRow);\r\n    dispatch({\r\n        type: SET_SELECTED_ROW,\r\n        payload: book.toObject()\r\n    });\r\n};\r\n\r\nexport let clearSelectedRow = () => dispatch => {\r\n    dispatch({\r\n        type: SET_SELECTED_ROW,\r\n        payload: undefined\r\n    });\r\n};","export const TABLE_UPDATE_SELECTED_KEYS = 'TABLE_UPDATE_SELECTED_KEYS';\r\nexport const SET_SELECTED_ROW = 'SET_SELECTED_ROW';","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { bookDelete } from '../../Books/Redux/Action';\r\nimport { updateSelectedTableKeys } from '../../Pages/TableView/Redux/Action';\r\n\r\n\r\nexport let DeleteButton = (props) => {\r\n\r\n    console.log(`Rendering DeleteButton`);\r\n\r\n    const { className, style, ...rest } = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const tableReducer = useSelector(store => store.table);\r\n\r\n    const onDeleteSelected = () => {\r\n        for (let key of tableReducer.selectedKeys) {\r\n            dispatch(bookDelete(key));\r\n        };\r\n        dispatch(updateSelectedTableKeys([]));\r\n    };\r\n\r\n    return (\r\n        <Button\r\n            type=\"primary\"\r\n            // changing array lengths will cause button to keep re-rendering. its fine anyway, just a small button\r\n            disabled={tableReducer.selectedKeys.length === 0}\r\n            icon={<DeleteOutlined />}\r\n            onClick={() => onDeleteSelected()}\r\n            {...rest}\r\n        >\r\n            {`Delete`}\r\n        </Button>\r\n    );\r\n};","import React, { useEffect } from 'react';\r\nimport './EditorView.less';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { Book } from '../../Books/Book';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bookAdd, bookUpdate } from '../../Books/Redux/Action';\r\nimport { appToggleEditingView } from '../../App/Redux/Actions';\r\nimport { LoremIpsum } from 'lorem-ipsum';\r\nimport { clearUpdatingRecordDetails } from './Redux/Action';\r\n\r\nconst { TextArea } = Input;\r\n\r\n// prepare lorem\r\nconst lorem = new LoremIpsum({\r\n    sentencesPerParagraph: {\r\n        max: 8,\r\n        min: 4\r\n    },\r\n    wordsPerSentence: {\r\n        max: 16,\r\n        min: 4\r\n    }\r\n});\r\n\r\nexport let EditorView = (props) => {\r\n\r\n    console.log(`Rendering EditorView`);\r\n\r\n    const { ...rest } = props;\r\n\r\n    const [form] = Form.useForm();\r\n    const dispatch = useDispatch();\r\n    const booksReducer = useSelector(store => store.books);\r\n    const editorReducer = useSelector(store => store.editor);\r\n\r\n    const layout = 'vertical';\r\n\r\n    const layoutWithoutLabel = {\r\n        wrapperCol: {\r\n            span: 24,\r\n        }\r\n    }\r\n\r\n    const layoutButtons = {\r\n        wrapperCol: {\r\n            span: 24,\r\n        }\r\n    }\r\n\r\n    const validateMessages = {\r\n        // eslint-disable-next-line no-template-curly-in-string\r\n        required: '${label} is required!',\r\n    };\r\n\r\n    // useEffect\r\n    useEffect(() => {\r\n        if (editorReducer.recordToUpdate !== undefined) {\r\n            const {\r\n                title,\r\n                isbn,\r\n                genre,\r\n                summary\r\n            } = editorReducer.recordToUpdate;\r\n            form.setFieldsValue({\r\n                Title: title,\r\n                ISBN: isbn,\r\n                GenreList: genre.split(',').map(g => g.trim()),\r\n                Summary: summary\r\n            });\r\n        }\r\n    }, [editorReducer.recordToUpdate === undefined])\r\n\r\n    const onQuickFill = () => {\r\n        form.setFieldsValue({\r\n            Title: lorem.generateSentences(1),\r\n            ISBN: Book.generateRandomIsbn(),\r\n            GenreList: [lorem.generateWords(1)],\r\n            Summary: lorem.generateParagraphs(5)\r\n        });\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        if (editorReducer.recordToUpdate === undefined) {\r\n            dispatch(bookAdd({\r\n                title: values.Title,\r\n                isbn: values.ISBN,\r\n                genre: values.GenreList,\r\n                summary: values.Summary\r\n            }));\r\n        }\r\n        else {\r\n            dispatch(bookUpdate({\r\n                title: values.Title,\r\n                isbn: values.ISBN,\r\n                genre: values.GenreList,\r\n                summary: values.Summary\r\n            }));\r\n            dispatch(clearUpdatingRecordDetails());\r\n        }\r\n        dispatch(appToggleEditingView());\r\n    }\r\n\r\n    return (\r\n        <div className='EditorView'>\r\n            <Form\r\n                form={form}\r\n                className='FormContainer'\r\n                layout='vertical'\r\n                name=\"book-editor\"\r\n                validateMessages={validateMessages}\r\n                initialValues={{\r\n                    GenreList: [\"\"]\r\n                }}\r\n                onFinish={onFinish}\r\n                {...rest}\r\n            >\r\n\r\n                <Form.Item\r\n                    name={'Title'}\r\n                    label=\"Title\"\r\n                    hasFeedback\r\n                    validateTrigger={'onBlur'}\r\n                    rules={[\r\n                        {\r\n                            required: true\r\n                        },\r\n                        () => ({\r\n                            validator(_, value) {\r\n                                // test for at least one character or digit\r\n                                if (/^(?=.*[\\w\\d]).+/.test(value))\r\n                                    return Promise.resolve();\r\n                                return Promise.reject(`Title should be alphanumeric`);\r\n                            }\r\n                        })\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        placeholder={`Book title`}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name={'ISBN'}\r\n                    label='ISBN'\r\n                    hasFeedback\r\n                    validateTrigger={'onBlur'}\r\n                    rules={[\r\n                        {\r\n                            required: true\r\n                        },\r\n                        () => ({\r\n                            validator(_, value) {\r\n                                // check if input is a valid isbn\r\n                                if (Book.isValidIsbn(value)) {\r\n                                    // check that isbn doesnt already exist in list\r\n                                    if (editorReducer.recordToUpdate === undefined\r\n                                        && Array.isArray(booksReducer.books)\r\n                                        && booksReducer.books.some(b => b.isbn === value))\r\n                                        return Promise.reject(`ISBN already exists in repository`);\r\n\r\n                                    return Promise.resolve();\r\n                                }\r\n                                return Promise.reject(`ISBN is invalid`);\r\n                            }\r\n                        })\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        className='NumberInput'\r\n                        placeholder={`[978|979]-[Group]-[Reg]-[Pub]-[CheckDigit]`}\r\n                    />\r\n                </Form.Item>\r\n                <Form.List\r\n                    name={'GenreList'}\r\n                >\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map((field, index) => (\r\n                                    <Form.Item\r\n                                        className='formListItem'\r\n                                        {...(index === 0 ? layout : layoutWithoutLabel)}\r\n                                        label={index === 0 ? 'Genre' : ''}\r\n                                        required={true}\r\n                                        hasFeedback\r\n                                        key={field.key}\r\n                                    >\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            validateTrigger={'onBlur'}\r\n                                            hasFeedback\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                    whitespace: true,\r\n                                                    message: index === 0\r\n                                                        ? \"Genre is required\"\r\n                                                        : \"Please input genre or delete this field.\",\r\n                                                },\r\n                                                () => ({\r\n                                                    validator(_, value) {\r\n                                                        // test that genre should not contain spaces\r\n                                                        if (/^[^\\s]*$/.test(value))\r\n                                                            return Promise.resolve();\r\n                                                        return Promise.reject(`Genre should not contain spaces`);\r\n                                                    }\r\n                                                })\r\n                                            ]}\r\n                                            noStyle\r\n                                        >\r\n                                            <Input\r\n                                                placeholder={`Genre type`}\r\n                                            />\r\n                                        </Form.Item>\r\n                                        {fields.length > 1 ? (\r\n                                            <MinusCircleOutlined\r\n                                                className='dynamic-delete-button'\r\n                                                onClick={() => {\r\n                                                    remove(field.name);\r\n                                                }}\r\n                                            />\r\n                                        ) : null}\r\n                                    </Form.Item>\r\n                                ))}\r\n                                <Form.Item\r\n                                    {...layoutWithoutLabel}\r\n                                >\r\n                                    <Button\r\n                                        style={{ width: '100%' }}\r\n                                        type='dashed'\r\n                                        onClick={() => add()}\r\n                                    >\r\n                                        <PlusOutlined /> Add Genre\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        )\r\n                    }}\r\n                </Form.List>\r\n                <Form.Item\r\n                    name={'Summary'}\r\n                    label=\"Summary\"\r\n                >\r\n                    <TextArea\r\n                        className='TextArea'\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    {...layoutButtons}\r\n                >\r\n                    {\r\n                        editorReducer.recordToUpdate === undefined\r\n                            ?\r\n                            <div className='ButtonGroup'>\r\n                                <Button\r\n                                    type='link'\r\n                                    htmlType=\"button\"\r\n                                    onClick={() => { onQuickFill() }}\r\n                                >\r\n                                    Quick Fill\r\n                                </Button>\r\n                                <Button\r\n                                    type='primary'\r\n                                    htmlType='submit'\r\n                                >\r\n                                    Add Book\r\n                                </Button>\r\n                            </div>\r\n                            :\r\n                            <div className='ButtonGroup'>\r\n                                <Button\r\n                                    type='primary'\r\n                                    htmlType='submit'\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                    }\r\n\r\n                </Form.Item>\r\n            </Form>\r\n        </div >\r\n    );\r\n};","import { SET_UPDATING_RECORD_DETAILS } from \"./ActionTypes\"\r\n\r\nexport let setUpdatingRecordDetails = (record) => dispatch => {\r\n    dispatch({\r\n        type: SET_UPDATING_RECORD_DETAILS,\r\n        payload: record\r\n    });\r\n};\r\n\r\nexport let clearUpdatingRecordDetails = () => dispatch => {\r\n    dispatch({\r\n        type: SET_UPDATING_RECORD_DETAILS,\r\n        payload: undefined\r\n    });\r\n};","export const SET_UPDATING_RECORD_DETAILS = 'SET_UPDATING_RECORD_DETAILS';","import { \r\n    APP_TOGGLE_EDITING_VIEW \r\n} from './ActionTypes';\r\n\r\nexport const appToggleEditingView = () => dispatch => {\r\n    dispatch({\r\n        type: APP_TOGGLE_EDITING_VIEW\r\n    });\r\n};","export const APP_TOGGLE_EDITING_VIEW = 'APP_TOGGLE_EDITING_VIEW';","import React from 'react';\r\nimport './TableView.less';\r\nimport { Table, Empty, ConfigProvider, Button, Tooltip } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ControlButton } from '../../Components/ControlButton';\r\nimport EmptySVG from '../../Assets/Images/empty.svg';\r\nimport { setSelectedRow, updateSelectedTableKeys } from './Redux/Action';\r\nimport { EditOutlined } from '@ant-design/icons';\r\n\r\nexport let TableView = (props) => {\r\n\r\n    console.log(`Rendering TableView`);\r\n\r\n    const dispatch = useDispatch();\r\n    const bookReducer = useSelector(store => store.books);\r\n    const tableReducer = useSelector(store => store.table);\r\n\r\n    const columns = [\r\n        {\r\n            title: tableReducer.selectedKeys.length > 0\r\n                ? `Title (${tableReducer.selectedKeys.length} books selected)`\r\n                : 'Title',\r\n            dataIndex: 'title',\r\n            width: '60%',\r\n        },\r\n        {\r\n            title: 'ISBN',\r\n            dataIndex: 'isbn',\r\n            width: '20%'\r\n        },\r\n        {\r\n            title: 'Genre',\r\n            dataIndex: 'genre',\r\n            width: '10%',\r\n            responsive: ['lg']\r\n        },\r\n        {\r\n            render: (text) => (\r\n                <Tooltip\r\n                    arrowPointAtCenter\r\n                    title={`Edit Record ${text.isbn}`}\r\n                >\r\n                    <Button\r\n                        type='text'\r\n                        icon={<EditOutlined />}\r\n                        onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            props.onEdit && props.onEdit(text);\r\n                        }}\r\n                    />\r\n                </Tooltip>\r\n\r\n            )\r\n        }\r\n    ];\r\n\r\n    const onSelectedRowsChange = (selectedRows) => {\r\n        // filter first, because after deleting keys, \r\n        // table component doesnt update its selected array, resulting in an undefined key\r\n        const keys = selectedRows.filter(r => r && r).map(r => r && r.key);\r\n        dispatch(updateSelectedTableKeys(keys));\r\n    };\r\n\r\n    return (\r\n        <ConfigProvider\r\n            renderEmpty={() =>\r\n                <Empty\r\n                    image={EmptySVG}\r\n                    imageStyle={{\r\n                        height: '10em',\r\n                    }}\r\n                    description={\r\n                        <span>\r\n                            No books to display\r\n                        </span>\r\n                    }\r\n                >\r\n                    <ControlButton\r\n                        type=\"primary\"\r\n                        onClick={() => props.onEmpty()}\r\n                    />\r\n                </Empty>}\r\n        >\r\n            <Table\r\n                columns={columns}\r\n                dataSource={bookReducer.books}\r\n                pagination={{\r\n                    position: ['bottomRight'],\r\n                    pageSize: 5,\r\n                    showQuickJumper: true,\r\n                    hideOnSinglePage: true,\r\n                }}\r\n                rowSelection={{\r\n                    onSelect: (record, selected, selectedRows) => {\r\n                        onSelectedRowsChange(selectedRows);\r\n                    },\r\n                    onSelectMultiple: (selected, selectedRows) => {\r\n                        onSelectedRowsChange(selectedRows);\r\n                    },\r\n                    onSelectAll: (selected, selectedRows) => {\r\n                        onSelectedRowsChange(selectedRows);\r\n                    }\r\n                }}\r\n                onRow={(record, idx) => {\r\n                    return {\r\n                        onClick: () => {\r\n                            dispatch(setSelectedRow(record));\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </ConfigProvider>\r\n    )\r\n};","import React, { useEffect, useState } from 'react';\r\nimport './CustomModal.less';\r\nimport { Button, Space } from 'antd';\r\nimport { CloseOutlined } from '@ant-design/icons';\r\nimport Title from 'antd/lib/typography/Title';\r\n\r\nexport let CustomModal = (props) => {\r\n\r\n    console.log(`Rendering Custom Modal`);\r\n\r\n    const {\r\n        isVisible,\r\n        onClose,\r\n        paperClassName,\r\n        paperStyle,\r\n        title,\r\n        children,\r\n        ...rest\r\n    } = props;\r\n    const [IsVisible, setIsVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // updates modal visibility\r\n        setIsVisible(isVisible);\r\n    }, [isVisible]);\r\n\r\n    // methods\r\n    const defaultOnClose = () => {\r\n        console.log(`No onClose Provided`);\r\n        setIsVisible(!IsVisible);\r\n    };\r\n\r\n    return IsVisible\r\n        ?\r\n        (\r\n            <div\r\n                className='CustomModal'\r\n                onClick={\r\n                    onClose\r\n                        ? onClose\r\n                        : defaultOnClose\r\n                }\r\n                {...rest}\r\n            >\r\n                <div\r\n                    id='paper'\r\n                    className={`ModalPaper ${paperClassName}`}\r\n                    style={{ ...paperStyle }}\r\n                    onClick={(e) => {\r\n                        e.stopPropagation();\r\n                    }}\r\n                >\r\n                    <Space direction='vertical' size='small'>\r\n                        <div className='ModalPaperHeaderDiv'>\r\n                            <div className='ModalPaperHeaderTitleDiv'>\r\n                                <Title level={4}>\r\n                                    {title || 'No title'}\r\n                                </Title>\r\n                            </div>\r\n                            <Button\r\n                                type='text'\r\n                                icon={<CloseOutlined />}\r\n                                onClick={\r\n                                    onClose\r\n                                        ? onClose\r\n                                        : defaultOnClose\r\n                                }\r\n                            />\r\n                        </div>\r\n                        <div className='childrenDiv'>\r\n                            {children}\r\n                        </div>\r\n                    </Space>\r\n                </div>\r\n            </div>\r\n        )\r\n        : null;\r\n};","import React, { useEffect, useCallback } from 'react';\r\nimport './App.less';\r\nimport { Space, Typography } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Header } from '../Header'\r\nimport { ControlButton } from '../Components/ControlButton';\r\nimport { DeleteButton } from '../Components/DeleteButton';\r\nimport { bookAdd } from '../Books/Redux/Action';\r\nimport { EditorView } from '../Pages/EditorView';\r\nimport { TableView } from '../Pages/TableView';\r\nimport { CustomModal } from '../Components/CustomModal';\r\n\r\nimport { appToggleEditingView } from './Redux/Actions';\r\n\r\nimport BooksInitialData from '../Assets/books.json';\r\nimport { clearSelectedRow } from '../Pages/TableView/Redux/Action';\r\nimport { setUpdatingRecordDetails } from '../Pages/EditorView/Redux/Action';\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nexport let App = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const appReducer = useSelector(store => store.app);\r\n    const tableReducer = useSelector(store => store.table);\r\n\r\n    console.log(`Rendering App`);\r\n\r\n    // effects\r\n    useEffect(() => {\r\n        // run once on page load :: [ComponentDidMount]\r\n        BooksInitialData.forEach(d => dispatch(bookAdd(d)));\r\n    }, [dispatch]);\r\n\r\n    // methods\r\n    const memoToggleEditingView = useCallback(\r\n        () => {\r\n            dispatch(appToggleEditingView());\r\n        },\r\n        [dispatch],\r\n    );\r\n\r\n    return (\r\n        <div className='App'>\r\n            <Header />\r\n            <div className='PageView'>\r\n                <div className='InnerPageView'>\r\n                    <Space direction='vertical' size='middle'>\r\n                        <div className='ControlButtons'>\r\n                            <ControlButton\r\n                                className=\"Control\"\r\n                                onClick={() => memoToggleEditingView()}\r\n                            />\r\n                            {!appReducer.isEditingView && <DeleteButton />}\r\n                        </div>\r\n                        {appReducer.isEditingView && <EditorView />}\r\n                        {!appReducer.isEditingView\r\n                            && <TableView\r\n                                onEmpty={() => memoToggleEditingView()}\r\n                                onEdit={(record) => {\r\n                                    dispatch(setUpdatingRecordDetails(record));\r\n                                    memoToggleEditingView();\r\n                                }}\r\n                            />\r\n                        }\r\n                    </Space>\r\n                </div>\r\n            </div>\r\n            <CustomModal\r\n                isVisible={tableReducer.selectedRow !== undefined}\r\n                onClose={() => { dispatch(clearSelectedRow()); }}\r\n                title={tableReducer.selectedRow?.title}\r\n            >\r\n                <div className='ModalBody'>\r\n                    <Space\r\n                        className='Space'\r\n                        direction='vertical'\r\n                        size='middle'\r\n                    >\r\n                        {/* Book information */}\r\n                        <div>\r\n                            <div className='ModalSubheader'>\r\n                                <Text style={{ flex: 1 }}>{`ISBN:`}</Text>\r\n                                <Text style={{ flex: 6 }}>{`${tableReducer.selectedRow?.isbn}`}</Text>\r\n                            </div>\r\n                            <div className='ModalSubheader'>\r\n                                <Text style={{ flex: 1 }}>{`Genre:`}</Text>\r\n                                <Text style={{ flex: 6 }}>{`${tableReducer.selectedRow?.genre}`}</Text>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* book summary */}\r\n                        <div className='ModalSummaryContainer'>\r\n                            <Title level={5}>{`Summary`}</Title>\r\n                            <div className='ModalSummaryBody'>\r\n                                <Text>\r\n                                    {`${tableReducer.selectedRow?.summary}`}\r\n                                </Text>\r\n                            </div>\r\n                        </div>\r\n                    </Space>\r\n                </div>\r\n            </CustomModal>\r\n        </div>\r\n    )\r\n}","import {\r\n    APP_TOGGLE_EDITING_VIEW\r\n} from './ActionTypes';\r\n\r\nconst AppReducerIniitalState = {\r\n    isEditingView: false\r\n};\r\n\r\nexport const AppReducer = (state = AppReducerIniitalState, action) => {\r\n    switch (action.type) {\r\n        case APP_TOGGLE_EDITING_VIEW: {\r\n            return { ...state, isEditingView: !state.isEditingView };\r\n        }\r\n        default:\r\n            return state;\r\n    };\r\n};","import {\r\n    BOOK_ADD,\r\n    BOOK_UPDATE,\r\n    BOOK_DELETE\r\n} from './ActionTypes';\r\nimport { Book } from \"../Book\";\r\n\r\nconst BookReducerInitialState = {\r\n    books: [], // [Book]\r\n};\r\n\r\nexport const BookReducer = (state = BookReducerInitialState, action) => {\r\n    switch (action.type) {\r\n        case BOOK_ADD: {\r\n            // payload::Book\r\n            if (!action.payload)\r\n                return state;\r\n            if (!action.payload instanceof Book)\r\n                return state;\r\n            return {\r\n                ...state,\r\n                books: [action.payload.toObject(), ...state.books]\r\n            };\r\n        }\r\n        case BOOK_UPDATE: {\r\n            // payload::Book\r\n            if (!action.payload)\r\n                return state;\r\n            if (!action.payload instanceof Book)\r\n                return state;\r\n            return {\r\n                ...state,\r\n                books: [action.payload.toObject(), ...state.books.filter(b => b.isbn !== action.payload.isbn)]\r\n            };\r\n        }\r\n        case BOOK_DELETE: {\r\n            // payload::String::isbn\r\n            if (!action.payload)\r\n                return state;\r\n            if (typeof action.payload !== 'string')\r\n                return state;\r\n            if (!Book.isValidIsbn(action.payload))\r\n                return state;\r\n            return {\r\n                ...state,\r\n                books: [...state.books.filter(b => b.isbn !== action.payload)]\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    };\r\n};","import {\r\n    TABLE_UPDATE_SELECTED_KEYS,\r\n    SET_SELECTED_ROW\r\n} from \"./ActionTypes\";\r\n\r\nconst TableViewInitialState = {\r\n    selectedKeys: [], // isbn\r\n    selectedRow: undefined\r\n};\r\n\r\nexport const TableViewReducer = (state = TableViewInitialState, action) => {\r\n    switch (action.type) {\r\n        case TABLE_UPDATE_SELECTED_KEYS: {\r\n            // action.payload::[String::isbn]\r\n            return { ...state, selectedKeys: action.payload };\r\n        }\r\n        case SET_SELECTED_ROW: {\r\n            // action.payload::object::Book | undefined\r\n            return { ...state, selectedRow: action.payload };\r\n        }\r\n        default:\r\n            return state;\r\n    };\r\n};","import { SET_UPDATING_RECORD_DETAILS } from \"./ActionTypes\";\r\n\r\nconst EditorViewInitialState = {\r\n    recordToUpdate: undefined\r\n};\r\n\r\nexport const EditorViewReducer = (state = EditorViewInitialState, action) => {\r\n    switch (action.type) {\r\n        case SET_UPDATING_RECORD_DETAILS: {\r\n            // action.payload::Book::toObject | undefined\r\n            return { ...state, recordToUpdate: action.payload }\r\n        }\r\n        default:\r\n            return state;\r\n    };\r\n};","import { combineReducers } from 'redux';\r\n\r\n// reducers\r\nimport { AppReducer } from '../App/Redux/AppReducer';\r\nimport { BookReducer } from '../Books/Redux/BooksReducer';\r\nimport { TableViewReducer } from '../Pages/TableView/Redux/TableViewReducer';\r\nimport { EditorViewReducer } from '../Pages/EditorView/Redux/EditorViewReducer';\r\n\r\nconst defaultReducer = (state = {}) => {\r\n    return state;\r\n};\r\n\r\nexport default combineReducers({\r\n    default: defaultReducer,\r\n    app: AppReducer,\r\n    books: BookReducer,\r\n    table: TableViewReducer, \r\n    editor: EditorViewReducer\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport combinedReducers from './CombineReducers';\r\n\r\n\r\nexport const store = createStore(\r\n    combinedReducers,\r\n    {}, // initial state\r\n    applyMiddleware(thunk)\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './App'\nimport { store } from './ReduxStore';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(\n//   <Provider store={store}>\n//     <App />\n//   </Provider>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}